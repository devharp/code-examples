<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <!-- Font Awesome -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet" />
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
    <!-- MDB -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/mdb-ui-kit/4.0.0/mdb.min.css" rel="stylesheet" />

    <script src="https://unpkg.com/peerjs@1.3.2/dist/peerjs.min.js"></script>

    <style>
        html,
        body {
            height: 100%;
            width: 100%;
        }
    </style>
</head>

<body class="d-flex justify-content-center">
    <div class="mt-5" style="max-width: 500px;">
        <div class="mb-5">
            <div class="d-flex justify-content-center">

                <div class="d-flex p-2" style="font-weight: 800; font-size: 1.5rem;">
                    <div style="padding: 0.25em; background-color: #4f4f4f;" class="text-white"><i class="fas fa-satellite-dish"></i></div>
                    <div style="padding: 0em 0.25em; color: #4f4f4f; border: 0.125em solid #4f4f4f;" class="d-flex align-items-center">HARP TV</div>
                </div>
            </div>
            <img id="video-static-pic" src="/static-video.png" style="display: block; height: 300px; width: 400px; border: solid 1px rgb(200, 200, 200);" alt="" srcset="">
            <video autoplay class="d-none" id="av-stream-id" style="transform: scaleX(-1); height: 300px; width: 400px;border: solid 1px rgb(200, 200, 200);"></video>
            <div class="d-flex align-items-center justify-content-center mt-4">A/V STREAM:&nbsp;
                <div class="d-flex" style="font-size: 0.8em;">
                    <div class="text-white bg-dark p-2 m-0 av-status-label"><b>NO</b></div>
                    <div class="text-dark bg-white m-0 av-status-label" style="border: 0.25em solid black; padding: 0.40em 0.35em 0 .35em;"><b>SIGNAL</b></div>
                </div>
            </div>
        </div>
        <div class="d-flex justify-content-between align-items-center mb-3">
            <div>My ID:&nbsp;</div>
            <div>
                <span id="peer-id-elem" style="font-weight: 300;">NOT CONNECTED&nbsp;</span>
                <span>
                    <button class="btn btn-primary btn-sm" onclick="copyMyPeerID()">
                        <i class="fa fa-copy"></i>
                    </button>
                </span>
            </div>
        </div>
        <div id="peers-list">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <div>ID:&nbsp;</div>
                <div>
                    <span style="font-weight: 300;">NOT CONNECTED&nbsp;</span>
                    <span>
                        <button class="btn btn-primary btn-sm" onclick="copyPeerID('text')">
                            <i class="fa fa-copy"></i>
                        </button>
                    </span>
                </div>
            </div>
        </div>
        <div class="form-outline mb-3">
            <input type="text" id="peer-id-field" class="form-control" />
            <label class="form-label" for="peer-id-field">Connect to other ID</label>
        </div>
        <div class="d-flex justify-content-center">
            <button id="peer-connect-id-btn" class="btn btn-primary">Connect</button>
        </div>
    </div>
    <!-- MDB -->
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/mdb-ui-kit/4.0.0/mdb.min.js"></script>

    <!-- Socket IO -->
    <script src="https://cdn.socket.io/4.5.0/socket.io.min.js" integrity="sha384-7EyYLQZgWBi67fBtVxw60/OWl1kjsfrPFcaU0pp0nAh+i8FD068QogUvg85Ewy1k" crossorigin="anonymous"></script>

    <!-- Peer JS -->
    <!-- <script src="/peerjs.min.js"></script> -->

    <!-- Ice Server List -->
    <script src="/iceservers.js"></script>

    <script src="/requesttypes.js"></script>

    <script>
        const xhr = new XMLHttpRequest();
        let peers_list = [];
        const socket = io();
        const peer = new Peer({
            config: {
                'iceServers': new IceServers().getList()
                    // 'iceServers': [{url: 'stun:stun.l.google.com:19302'}]
            }
        });
        socket.on('connect', () => {
            console.log('found server: ', REQUEST_TYPES.PEERS_LIST_UPDATED);
            socket.on(REQUEST_TYPES.PEERS_LIST_UPDATED, (data) => {
                console.log('peers list updated: ', data);
                updatePeersList(data);
            });

            peer.on('open', (conn) => {

                if (!socket.active) {
                    return;
                }
                console.log('Peer ID: ', peer.id);
                document.getElementById('peer-id-elem').innerHTML = peer.id + '&nbsp;';

                const connectbtn = document.getElementById('peer-connect-id-btn');
                const peeridfield = document.getElementById('peer-id-field');
                const static_video_pic = document.getElementById('video-static-pic');
                const avstreamid = document.getElementById('av-stream-id');

                connectbtn.onclick = () => {
                    console.log('btn clicked');
                    const peerid = peeridfield.value;
                    if (peerid.length === 0) {
                        alert('Enter other peer id required to connect');
                        return;
                    }
                    navigator.mediaDevices.getUserMedia({
                            video: {
                                height: 500,
                                width: 500
                            },
                            audio: false
                        })
                        .then(stream => {
                            const call = peer.call(peerid, stream);

                            call.on('stream', stream => {
                                static_video_pic.style.display = 'none';
                                avstreamid.classList.remove('d-none');
                                avstreamid.srcObject = stream;

                                const avstatus = document.getElementsByClassName('av-status-label');
                                avstatus[0].innerHTML = '<b>LIVE</b>';
                                avstatus[0].classList.remove('bg-dark');
                                avstatus[0].classList.add('bg-danger');

                                avstatus[1].innerHTML = '<b>STREAMING</b>';
                                avstatus[1].classList.remove('text-dark');
                                avstatus[1].classList.add('text-danger');
                                avstatus[1].style.borderColor = 'rgba(249,49,84,1)';
                                // avstatus[1].style.color = 'rgba(249,49,84,1)';

                            });
                        });
                };

                peer.on('call', call => {
                    navigator.mediaDevices.getUserMedia({
                            video: {
                                height: 200,
                                width: 200
                            },
                            audio: false
                        })
                        .then(stream => {
                            call.answer(stream);
                        });
                });

                xhr.open('POST', '/manage');
                xhr.onreadystatechange = () => {
                    if (xhr.readyState === XMLHttpRequest.DONE) {
                        const payload = JSON.parse(xhr.response);
                        console.log('received a response from a server: ', xhr.response);
                        switch (payload.type) {
                            case 'peers':
                                updatePeersList(payload.data);
                                break;
                            default:
                                console.error('Unknown Type Received');
                                break;
                        }
                    }
                }
                xhr.send(JSON.stringify({
                    type: REQUEST_TYPES.ADD_PEER_TO_SOCKET,
                    socket: socket.id,
                    peer: peer.id
                }));
            });
        });

        function copyMyPeerID() {

            if (peer.open) {
                navigator.clipboard.writeText(peer.id)
                    .then(() => {
                        console.log('copy successful');
                    });
            } else {
                alert('ERROR: Peer ID Not Available!')
            }
        }

        function copyPeerID(id) {
            if (peer.open) {
                navigator.clipboard.writeText(id)
                    .then(() => {
                        console.log('copy successful');
                        document.getElementById('peer-id-field').value = id;
                        document.getElementById('peer-id-field').focus();
                    });
            } else {
                alert('ERROR: A error occurred while copying the peer id')
                console.error('ERROR: A error occurred while copying the peer id')
            }
        }

        function updatePeersList(list) {
            peers_list = list;
            if (peer.open) {
                const peers_list_element = document.getElementById('peers-list');
                let HTML_STRING = '';
                for (let i = 0; i < peers_list.length; i++) {
                    const e = peers_list[i];
                    if (e !== peer.id) {
                        HTML_STRING += `<div class="d-flex justify-content-between align-items-center mb-3">
                <div>ID:&nbsp;</div>
                <div>
                    <span style="font-weight: 300;">${e}&nbsp;</span>
                    <span>
                        <button class="btn btn-primary btn-sm" onclick="copyPeerID('${e}')">
                            <i class="fa fa-copy"></i>
                        </button>
                    </span>
                </div>
            </div>`;
                    }
                }
                peers_list_element.innerHTML = HTML_STRING;
            }
        }
    </script>
</body>

</html>