<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.5.0/socket.io.js"
        integrity="sha512-/xb5+PNOA079FJkngKI2jvID5lyiqdHXaUUcfmzE0X0BdpkgzIWHC59LOG90a2jDcOyRsd1luOr24UCCAG8NNw=="
        crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="https://unpkg.com/peerjs@1.3.2/dist/peerjs.min.js"></script>
    <style>
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        html,
        body {
            height: 100%;
            width: 100%;
        }

        body {
            font-family: sans-serif;
        }
    </style>
</head>

<body>
    <div id="vids">
        <video id="my-cam"></video>
    </div>
    <script>
        let peers = [];
        const socket = io();

        const peer = new Peer({
            config: {
                'iceServers': [
                    { url: 'stun:stun.l.google.com:19302' }
                ]
            } /* Sample servers, please use appropriate ones */
        });

        socket.on('connect', () => {
            console.log('found server');

        });
        peer.on('open', conn => {
            console.log('peer: ', peer.id);
            socket.emit('peer-id', peer.id);
        });

        const mycam = document.getElementById('my-cam');

        navigator.mediaDevices.getUserMedia({ video: { width: 100, height: 100 }, audio: false })
            .then(stream => {
                mycam.srcObject = stream;
                mycam.onloadeddata = e => mycam.play();
                peer.on('call', call => {
                    console.log('received a call request');
                    setVidElems();
                    call.answer(stream);
                    call.on('stream', rstream => {
                        const rvid = document.createElement('video');
                        rvid.setAttribute('id', call.peer);
                        document.getElementById('vids').appendChild(rvid);
                        rvid.onloadeddata = e => rvid.play();
                        rvid.srcObject = rstream;
                        call.on('close', () => {
                            console.log('peer left')
                            // document.getElementById('vids').removeChild(rvid);
                        });
                    });
                });
                socket.on('joined', peerslist => {
                    console.log('joined users peerid: ', peerslist);
                    peers = peerslist;
                    for (let i = 0; i < peerslist.length; i++) {
                        const e = peerslist[i];
                        if (e !== peer.id) {
                            peer.call(e, stream);
                        }
                    }
                    setVidElems();

                });
                socket.on('left', peerslist => {
                    console.log('someone left');
                    for (let i = 0; i < peers.length; i++) {
                        const e = peers[i];
                        let found = false;
                        for (let j = 0; j < peerslist.length; j++) {
                            const f = peerslist[j];
                            if (e === f) { found = true; break; }
                        }
                        if (found === false) {
                            // console.log('this id: ', e, ' left');
                        }
                    }
                    peers = peerslist;
                    setVidElems();
                });
            });

        function setVidElems() {
            setTimeout(() => {
                const nodes = document.getElementById('vids').children;
                if(peers.length !== nodes.length){
                    console.log('something is wrong, video elements are not updated correctly');
                    let temppeer = [];
                    for(let i = 0; i < nodes.length; i++){
                        const e = nodes[i];
                        let found = false;
                        if(e.id === 'my-cam'){
                            found = true;
                        }
                        else{
                            peers.map(ee => {if(ee === e.id){ found = true; }});
                        }
                        if(found === false){
                            e.remove();
                        }
                        console.log('got id here: ', found);

                        const val = temppeer.filter(te => { return te === e.id });
                        if(val.length === 0){
                            temppeer.push(e.id);
                        }
                        else{
                            e.remove();
                        }
                        
                    }
                }
            }, 500);
        }

    </script>
</body>

</html>